
## Question 1

### (a)
```{r Question 1a}
mixed1 <- c(TRUE, FALSE, FALSE, TRUE, 4, 0, 3)
mixed1

mixed2 <- c(TRUE, FALSE, c(c(FALSE, TRUE, 4, 0), "3"))
mixed2

mixed3 <- c(c(TRUE, FALSE, FALSE, TRUE, 4, 0), "3")
mixed3
```
mixed2 and mixed3 produce different results because combining logical and numeric vectors in a single vector will result in numerical vectors.

### (b)

```{r Question 1b}
mixed4 <- c(TRUE, FALSE, c(c(FALSE, TRUE, 4, 0), "3"))
mixed4
```

## Question 2

### (a)

```{r Question 2a}
as.numeric(mixed2)
as.numeric(mixed3)
```
The logical values in mixed2 cannot be converted into numerical ones because they aren't included in the same vector, so they are now NA. While, in mixed3 the logical values are already in the same vector as the numerical ones, so they are coerced in to numerical ones.

### (b)

```{r Question 2b}
as.logical(mixed2)
as.logical(mixed3)
```
mixed2 produces two logical values and the rest as NA because the first two logical values are in their own vector while the other logical values are in a vector with numbers and logical values are lower than numbers on the hierarchy. mixed3 produces all NA values becaue the logical values are included in the same vector with the numerical values all values are NA since logical values are lowest on the hierarchy. 

### (c)

```{r Question 2c}
as.logical(as.numeric(mixed3))
```

## Question 3

### (a)

```{r Question 3a}
seq(1, 25)
1:25
seq_len(25)
seq_along(c(1, 2, 3 , 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
```

### (b)

```{r Question 3b}
# (i)
seq(8, 2, length = 13)

# (ii)
rep(c(-1, 0, 3, 5), 5)

# (iii)
rep(seq(5, 1), 5)

# (iv)
rep(seq(5, 1), rep(5, 5))

# (v)
rep(c(10, 9, 8, 7, 6), c(1, 2, 3, 4, 5))
```

### (c)

The pattern cannot be created using only seq() and rep() functions becuase there is no way to add and subtract numbers from sequences using the sequence function; the whole sequence will have to print itself. You'd have to assign values to the existing vector to build this sequence and subset. 

## Question 4

### (a)

```{r Question 4a}
my_skew <- function(x) {
  n = length(x)
  xbar = mean(x)
  (sqrt(n)*sum((x-xbar)^3))/((sum((x-xbar)^2)^(3/2)))
}
```

### (b)

```{r Question 4b}
running_times <- c(51, 40, 57, 34, 47, 50, 50, 56, 41, 38)
my_skew(running_times)
```

Since the value is significantly less than 0 the distribution is left-skewed. 

### (c)

```{r Question 4c}
my_skew_one <- function(x) {
  n = length(x)
  xbar = mean(x)
  (sqrt(n)*(sum(x^3)-3*xbar*sum(x^2)+2*n*xbar^3))/((sum(x^2)-n*(xbar^2))^(3/2))
}

my_skew_one(running_times)
```

### (d)

```{r Question 4d}
running_times_big <- c(51*(10^10), 40*(10^10), 57*(10^10), 34*(10^10), 47*(10^10), 50*(10^10), 50*(10^10), 56*(10^10), 41*(10^10), 38*(10^10))


my_skew(running_times_big)
my_skew_one(running_times_big)
```
The results are the same as in (b) and (c) because all the values are scaled up by the same amount, so the differences between the values is still the same.

### (e)

The difference is not identically 0 because of the approximate storage of numbers, so the output is not exactly 0 but it is very close.  

## Question 5

### (a)

```{r Question 5a}
commute_times <- c(14, 12, 20, 19, 15, 20, 28, 20, 20, 18)
sd_times <- sd(commute_times)
mean_times <- mean(commute_times)
logical_commute_1 <- (commute_times > mean_times + sd_times | commute_times < mean_times - sd_times)
logic <- length(commute_times[logical_commute_1])
logic
```
Commute times 1 (14), 2 (12), and 7 (28) were more than one standard deviation away from the average commute time.

### (b)
```{r Question 5b}
commute_times <- c(14, 12, 20, 19, 15, 20, 28, 20, 20, 18)
sd_times <- sd(commute_times)
mean_times <- mean(commute_times)
logical_commute_2 <- (commute_times < mean_times + sd_times & commute_times > mean_times - sd_times)
commute_times[logical_commute_2]
```

Commute times 3 (20), 4 (19), 5 (15), 6 (20), 8 (20), 9 (20), and 10 (18) are within one standard deviation of the mean. 

### (c)

```{r Question 5c}
commute_times <- c(14, 12, 20, 19, 15, 20, 28, 20, 20, 18)
sd_times <- sd(commute_times)
mean_times <- mean(commute_times)
logical_commute_3 <- (commute_times < mean_times + sd_times & commute_times > mean_times - sd_times)
summary(logical_commute_3)
sum(logical_commute_3)/10
```
The proportion of days with a commute time within one standard deviation of the mean is 7/10 or 0.7.

## Question 6

The reason that the first output is NA is because the value that is NA is unknown, so we can't know if both are true so the output is unknown. The second command outputs as false because the and operator is used and since one value is false, that means the staement is false. The third statement is true because the or operator is used and one value is already true, so the statement is true. The fourth output is unknown because one input is false but we don't know about the other input and the or operator is used, so it is possible that it could be true, but we just don't know.

## Question 7

### (a)

The get_minimum_coins() function I wrote in Homework 1 is vectorized becuase if the function is called on a vector it will apply to every element of the vector. 


### (b)

```{r Question 7b}
get_minimum_coins <- function(cents) {
  test_1 <- cents %% 25 # sets remainder of cents left #
  output_1 <- cents %/% 25 # number of times that the coin divides into the running total of cents #
  test_2 <- test_1 %% 10 # sets remainder of cents left #
  output_2 <- (test_1) %/% 10 # number of times that the coin divides into the running total of cents #
  test_3 <- test_2 %% 5 # sets remainder of cents left #
  output_3 <- test_2 %/% 5 # number of times that the coin divides into the running total of cents #
  output_4 <- test_3 %/% 1 # number of times that the coin divides into the running total of cents #
  minimum_total <- output_4 + output_3 + output_2 + output_1
  minimum_total
}


which(get_minimum_coins(1:99) == max(get_minimum_coins(1:99)))

```

## Question 8

### (a)

```{r Question 8a}
my_length <- function(x) {
  build_sequence <- seq(x)
  max(build_sequence)
}
```

### (b)

```{r Question 8b}

# (i)
# my_length(numeric(0))

# The function doesn't work with numeric(0) due to the max() function and I don't know how to fix that

# (ii)
my_length(seq(1, 99, by = 2))

# (iii)
my_length(c("friends", "waffles", "work"))

```

## Question 9

### (a)

```{r Question 9a}
my_rev <- function(x) {
  x[length(x):0]
}
```

### b

```{r Question 9b}

# (i)
my_rev(numeric(0))

# (ii)
my_rev(seq(1, 99, by = 2))

# (iii)
my_rev(c("friends", "waffles", "work"))
```

## Question 10

### (a)

```{r Question 10a}
front <- function(x, n) {
  x[0:n] 
}
# I don't know how to get rid of the NA values without using if statements
front(seq(1, 99, by = 2), 6)
front(c("friends", "waffles", "work"), 6)
```

### (b)

```{r Question 10b}
back <- function(x, n) {
  reverse <- rev(x)
  reverse[length(x)]
}

# I don't know how to get rid of the NA values without using if statements
back(seq(1, 99, by = 2), 6)
back(c("friends", "waffles", "work"), 6)
```

### (c)

```{r Question 10c}
insert_at <- function(x, values, at) {
  beginning <- x < at
  ending <- x >= at
  new_vec <- c(front(beginning, at), values, back(ending, length(x)))
  new_vec
}
```

### (d)

```{r Question 10d}
insert_at(1:5, c(0, 0, 0), at = 1)
insert_at(1:5, c(0, 0, 0), at = 3)
insert_at(1:5, c(0, 0, 0), at = 5)
insert_at(1:5, c(0, 0, 0), at = 6)

# The insertions are in the right plce but the values added are messing up and I do not know why that is and also all the values in the vectors have converted to the same value and I don't know why.  
```

```{r Question 8a}
seq <- c(7, NA, 4, NA, 3, Inf, NaN)
is_only_na <- function(x) {
  is_na <- is.na(x) == TRUE
  x[is_na]
}


is_only_na(seq)

```

```{r Question 8a}
my_fun <- function(x, y) {
  output <- 0
  i <- 1
while (length(output) < length(x)*y) {
  
  }
}
```
